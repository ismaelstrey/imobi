// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nome      String
  senha     String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  favoritos    Favorito[]
  contatos     Contato[]
  priceAlerts  PriceAlert[]
  notifications NotificationSubscription[]

  @@map("users")
}

model Imovel {
  id          String   @id @default(cuid())
  titulo      String
  preco       Float
  tipo        String
  endereco    String
  cidade      String
  bairro      String?
  descricao   String
  areaUtil    Float
  dormitorios Int
  banheiros   Int
  vagas       Int
  imagens     String[]
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  favoritos   Favorito[]
  contatos    Contato[]
  priceAlerts PriceAlert[]
  priceHistory PriceHistory[]

  @@map("imoveis")
}

model Favorito {
  id       String @id @default(cuid())
  userId   String
  imovelId String
  createdAt DateTime @default(now())

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imovel Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@unique([userId, imovelId])
  @@map("favoritos")
}

model Contato {
  id       String  @id @default(cuid())
  nome     String
  email    String
  telefone String
  mensagem String
  imovelId String?
  userId   String?
  respondido Boolean @default(false)
  createdAt DateTime @default(now())

  // Relacionamentos
  imovel Imovel? @relation(fields: [imovelId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])

  @@map("contatos")
}

model PriceAlert {
  id                 String            @id @default(cuid())
  userId             String
  imovelId           String
  alertType          PriceAlertType
  reductionAmount    Float?
  reductionPercentage Float?
  originalPrice      Float
  ativo              Boolean           @default(true)
  lastNotification   DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imovel Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@unique([userId, imovelId])
  @@map("price_alerts")
}

model PriceHistory {
  id       String   @id @default(cuid())
  imovelId String
  preco    Float
  createdAt DateTime @default(now())

  // Relacionamentos
  imovel Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model NotificationSubscription {
  id       String @id @default(cuid())
  userId   String
  endpoint String
  p256dh   String
  auth     String
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("notification_subscriptions")
}

enum Role {
  USER
  ADMIN
}

enum PriceAlertType {
  ANY_CHANGE
  SPECIFIC_REDUCTION
  PERCENTAGE_REDUCTION
}