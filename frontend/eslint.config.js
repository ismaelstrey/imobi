import js from '@eslint/js';
import typescript from '@typescript-eslint/eslint-plugin';
import typescriptParser from '@typescript-eslint/parser';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';

export default [
  js.configs.recommended,
  // Service Worker configuration
  {
    files: ['**/sw.js', '**/registerSW.ts'],
    languageOptions: {
      globals: {
        self: 'readonly',
        caches: 'readonly',
        clients: 'readonly',
        console: 'readonly',
        fetch: 'readonly',
        indexedDB: 'readonly',
        process: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        URL: 'readonly',
        Promise: 'readonly',
        Response: 'readonly',
        Request: 'readonly',
        Headers: 'readonly',
      },
    },
  },
  {
    files: ['**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'],
    languageOptions: {
      parser: typescriptParser,
      ecmaVersion: 2020,
      sourceType: 'module',
      globals: {
        // Browser globals
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        console: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        fetch: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        location: 'readonly',
        history: 'readonly',
        Event: 'readonly',
        CustomEvent: 'readonly',
        Notification: 'readonly',
        NotificationOptions: 'readonly',
        FileReader: 'readonly',
        File: 'readonly',
        FileList: 'readonly',
        Image: 'readonly',
        URL: 'readonly',
        crypto: 'readonly',
        Element: 'readonly',
        PerformanceEntry: 'readonly',
        PerformanceObserver: 'readonly',
        HTMLElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLSelectElement: 'readonly',
        HTMLTextAreaElement: 'readonly',
        HTMLFormElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLSpanElement: 'readonly',
        HTMLImageElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLAudioElement: 'readonly',
        Blob: 'readonly',
        FormData: 'readonly',
        XMLHttpRequest: 'readonly',
        WebSocket: 'readonly',
        Worker: 'readonly',
        ServiceWorker: 'readonly',
        alert: 'readonly',
        confirm: 'readonly',
        prompt: 'readonly',
        URLSearchParams: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        indexedDB: 'readonly',
        // Service Worker globals
        self: 'readonly',
        caches: 'readonly',
        clients: 'readonly',
        // Node.js globals for build scripts
        process: 'readonly',
        Buffer: 'readonly',
        global: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': typescript,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...typescript.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
      '@typescript-eslint/no-unused-vars': ['error', { 
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
      }],
      '@typescript-eslint/no-explicit-any': 'warn',
      'prefer-const': 'error',
      'no-var': 'error',
      'no-undef': 'error',
      'no-useless-catch': 'warn', // Allow useless catch blocks as warnings
      'react-hooks/exhaustive-deps': 'warn', // Make this a warning instead of error
    },
  },
  {
    // Special configuration for test files
    files: ['tests/**/*.{ts,tsx}', '**/*.test.{ts,tsx}', '**/*.spec.{ts,tsx}'],
    languageOptions: {
      parser: typescriptParser,
      ecmaVersion: 2020,
      sourceType: 'module',
      globals: {
         // Browser globals
         window: 'readonly',
         document: 'readonly',
         navigator: 'readonly',
         console: 'readonly',
         setTimeout: 'readonly',
         clearTimeout: 'readonly',
         setInterval: 'readonly',
         clearInterval: 'readonly',
         fetch: 'readonly',
         localStorage: 'readonly',
         sessionStorage: 'readonly',
         location: 'readonly',
         history: 'readonly',
         Event: 'readonly',
         CustomEvent: 'readonly',
         Notification: 'readonly',
         NotificationOptions: 'readonly',
         FileReader: 'readonly',
         File: 'readonly',
         Image: 'readonly',
         URL: 'readonly',
         crypto: 'readonly',
         Element: 'readonly',
         PerformanceEntry: 'readonly',
         PerformanceObserver: 'readonly',
         HTMLElement: 'readonly',
         HTMLInputElement: 'readonly',
         HTMLFormElement: 'readonly',
         HTMLButtonElement: 'readonly',
         HTMLDivElement: 'readonly',
         HTMLImageElement: 'readonly',
         HTMLCanvasElement: 'readonly',
         HTMLVideoElement: 'readonly',
         HTMLAudioElement: 'readonly',
         Blob: 'readonly',
         FormData: 'readonly',
         XMLHttpRequest: 'readonly',
         WebSocket: 'readonly',
         Worker: 'readonly',
         alert: 'readonly',
          confirm: 'readonly',
          prompt: 'readonly',
          URLSearchParams: 'readonly',
          Headers: 'readonly',
          Request: 'readonly',
          Response: 'readonly',
          FileList: 'readonly',
          indexedDB: 'readonly',
          // Service Worker globals
          self: 'readonly',
          caches: 'readonly',
          clients: 'readonly',
          // Node.js globals
          process: 'readonly',
         // Test globals
         test: 'readonly',
         expect: 'readonly',
         describe: 'readonly',
         it: 'readonly',
         beforeEach: 'readonly',
         afterEach: 'readonly',
         beforeAll: 'readonly',
         afterAll: 'readonly',
       },
    },
    rules: {
      '@typescript-eslint/no-explicit-any': 'off', // Allow any in tests
      '@typescript-eslint/no-unused-vars': 'off', // Allow unused vars in tests
    },
  },
  {
    ignores: ['dist', '.eslintrc.cjs', 'node_modules', 'build'],
  },
];